# handlers/moderation.py

from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
from utils.db import (
    mute_user,
    unmute_user,
    ban_user,
    unban_user,
    get_user_by_forwarded,
    get_user_status
)
from utils.config import RELAY_GROUP_ID
from utils.logger import setup_logger
from datetime import datetime, timedelta
import asyncio

router = Router()
logger = setup_logger("moderation")
logger.info("[MOD] moderation.py –∑–∞–≥—Ä—É–∂–µ–Ω")


def extract_user_id_from_reply(message: Message) -> int | None:
    if not message.reply_to_message:
        return None

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    mapped_id = get_user_by_forwarded(message.reply_to_message.message_id)
    if mapped_id:
        return mapped_id

    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî fallback –Ω–∞ from_user.id
    return message.reply_to_message.from_user.id


async def reply_required(message: Message, command: str):
    info = await message.reply(f"‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {command} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await asyncio.sleep(3)
    try:
        await message.delete()
        await info.delete()
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# üîá /mute
@router.message(F.text.startswith("/mute"))
async def cmd_mute(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_mute –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != RELAY_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/mute")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/mute")
        return

    muted_until = (datetime.utcnow() + timedelta(hours=2)).isoformat()
    mute_user(user_id, muted_until=muted_until)

    logger.info(f"[MOD] –ó–∞–º—å—é—á–µ–Ω user_id={user_id} –¥–æ {muted_until} UTC")
    await message.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –¥–æ {muted_until} UTC.")

    try:
        await bot.send_message(user_id, f"üîá –í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—å—é—á–µ–Ω—ã –¥–æ {muted_until} UTC.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# üîä /unmute
@router.message(F.text.startswith("/unmute"))
async def cmd_unmute(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_unmute –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != RELAY_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/unmute")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/unmute")
        return

    unmute_user(user_id)
    logger.info(f"[MOD] –†–∞–∑–º—å—é—á–µ–Ω user_id={user_id}")
    await message.reply(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")

    try:
        await bot.send_message(user_id, "üîä –í—ã –±—ã–ª–∏ —Ä–∞–∑–º—å—é—á–µ–Ω—ã.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# üö´ /ban
@router.message(F.text.startswith("/ban"))
async def cmd_ban(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_ban –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != RELAY_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/ban")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/ban")
        return

    banned_at = datetime.utcnow().isoformat()
    ban_user(user_id, banned_at=banned_at)

    logger.info(f"[MOD] –ó–∞–±–∞–Ω–µ–Ω user_id={user_id} –≤ {banned_at} UTC")
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {banned_at} UTC.")

    try:
        await bot.send_message(user_id, f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {banned_at} UTC.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# ‚úÖ /unban
@router.message(F.text.startswith("/unban"))
async def cmd_unban(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_unban –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != RELAY_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/unban")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/unban")
        return

    unban_user(user_id)
    logger.info(f"[MOD] –†–∞–∑–±–∞–Ω–µ–Ω user_id={user_id}")
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    try:
        await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# ‚ùì /status
@router.message(Command("status"))
async def cmd_status(message: Message):
    user_id = extract_user_id_from_reply(message)
    if not user_id:
        await reply_required(message, "/status")
        return

    logger.info(f"[STATUS] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user_id={user_id}")

    try:
        status = get_user_status(user_id)
    except Exception as e:
        logger.error(f"[STATUS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not status:
        await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if status.get("banned"):
        banned_at = status.get("banned_at")
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å {banned_at} UTC.")
        return

    if status.get("muted"):
        muted_until = status.get("muted_until")
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –¥–æ {muted_until} UTC.")
        return

    await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")


