# handlers/thanks.py

import asyncio
import re

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from utils.config import MEDPHYSPRO_GROUP_ID
from utils.thanks_db import increment_thanks, get_top_thanked
from utils.thanks_words import load_thanks_words
from utils.logger import get_logger

router = Router()
logger = get_logger("thanks")
logger.info("[THANKS] thanks.py –∑–∞–≥—Ä—É–∂–µ–Ω")

THANKS_WORDS = load_thanks_words()
EMOJI_TRIGGERS = {"üôè", "ü§ù", "‚ù§Ô∏è", "üíê"}

@router.message(F.chat.id == MEDPHYSPRO_GROUP_ID, F.reply_to_message)
async def detect_thanks(message: Message):
    text = (message.text or "").lower()
    words = re.findall(r"\b\w+\b", text)

    fuzzy_hits = [
        word for word in words
        if any(word.startswith(thx) for thx in THANKS_WORDS)
    ]

    emoji_hits = any(emoji in message.text for emoji in EMOJI_TRIGGERS)

    if fuzzy_hits or emoji_hits:
        target_user = message.reply_to_message.from_user
        if target_user:
            increment_thanks(target_user.id, target_user.full_name)
            logger.info(
                f"[THANKS] +1 –¥–ª—è {target_user.full_name} ({target_user.id}) ‚Äî "
                f"—Å–ª–æ–≤–∞: {fuzzy_hits}, —ç–º–æ–¥–∑–∏: {emoji_hits}"
            )

@router.message(F.chat.id == MEDPHYSPRO_GROUP_ID, Command("top10", ignore_mention=True, ignore_case=True))
async def show_top_thanked(message: Message):
    logger.info(f"[THANKS] –ö–æ–º–∞–Ω–¥–∞ /top10 –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name} ({message.from_user.id})")

    top = get_top_thanked(limit=10)
    if not top:
        reply = await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.")
        logger.info("[THANKS] –°–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –ø—É—Å—Ç")
    else:
        lines = [f"üèÜ –¢–û–ü-10 –ø–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—è–º:"]
        for i, (name, count) in enumerate(top, 1):
            lines.append(f"{i}. {name} ‚Äî {count}")
        reply = await message.answer("\n".join(lines))
        logger.info(f"[THANKS] –°–ø–∏—Å–æ–∫ –¢–û–ü-10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({len(top)} –∑–∞–ø–∏—Å–µ–π)")

    # ‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    try:
        await message.delete()
        logger.info(f"[THANKS] –ö–æ–º–∞–Ω–¥–∞ /top10 —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.warning(f"[THANKS] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /top10: {e}")

    # ‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(57)
    try:
        await reply.delete()
        logger.info(f"[THANKS] –û—Ç–≤–µ—Ç –ø–æ /top10 —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.warning(f"[THANKS] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ /top10: {e}")
