# handlers/moderation.py

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.filters import Command

from utils.db import (
    mute_user,
    unmute_user,
    ban_user,
    unban_user,
    get_user_by_forwarded,
    get_user_status
)
from utils.config import ADMIN_GROUP_ID, MEDPHYSPRO_GROUP_ID, LOG_CHANNEL_ID, MEDPHYSPRO_GROUP_TOPIC_ID
from utils.logger import get_logger
from datetime import datetime, timedelta
import asyncio

from utils.sender import send_content_to_group

router = Router()
logger = get_logger("moderation")
logger.info("[MOD] moderation.py –∑–∞–≥—Ä—É–∂–µ–Ω")

def extract_user_id_from_reply(message: Message) -> int | None:
    if not message.reply_to_message:
        return None

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    mapped_id = get_user_by_forwarded(message.reply_to_message.message_id)
    if mapped_id:
        return mapped_id

    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî fallback –Ω–∞ from_user.id
    return message.reply_to_message.from_user.id


async def reply_required(message: Message, command: str):
    info = await message.reply(f"‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {command} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await asyncio.sleep(3)
    try:
        await message.delete()
        await info.delete()
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# üîá /mute
@router.message(F.chat.id == ADMIN_GROUP_ID, Command("mute", ignore_mention=True, ignore_case=True))
async def cmd_mute(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_mute –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != ADMIN_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/mute")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/mute")
        return

    muted_until = (datetime.utcnow() + timedelta(hours=2)).isoformat()
    mute_user(user_id, muted_until=muted_until)

    logger.info(f"[MOD] –ó–∞–º—å—é—á–µ–Ω user_id={user_id} –¥–æ {muted_until} UTC")
    await message.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –¥–æ {muted_until} UTC.")

    try:
        await bot.send_message(user_id, f"üîá –í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—å—é—á–µ–Ω—ã –¥–æ {muted_until} UTC.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# üîä /unmute
@router.message(F.chat.id == ADMIN_GROUP_ID, Command("unmute", ignore_mention=True, ignore_case=True))
async def cmd_unmute(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_unmute –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != ADMIN_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/unmute")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/unmute")
        return

    unmute_user(user_id)
    logger.info(f"[MOD] –†–∞–∑–º—å—é—á–µ–Ω user_id={user_id}")
    await message.reply(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")

    try:
        await bot.send_message(user_id, "üîä –í—ã –±—ã–ª–∏ —Ä–∞–∑–º—å—é—á–µ–Ω—ã.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# üö´ /ban
@router.message(F.chat.id == ADMIN_GROUP_ID, Command("ban", ignore_mention=True, ignore_case=True))
async def cmd_ban(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_ban –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != ADMIN_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/ban")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/ban")
        return

    banned_at = datetime.utcnow().isoformat()
    ban_user(user_id, banned_at=banned_at)

    logger.info(f"[MOD] –ó–∞–±–∞–Ω–µ–Ω user_id={user_id} –≤ {banned_at} UTC")
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {banned_at} UTC.")

    try:
        await bot.send_message(user_id, f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {banned_at} UTC.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# ‚úÖ /unban
@router.message(F.chat.id == ADMIN_GROUP_ID, Command("unban", ignore_mention=True, ignore_case=True))
async def cmd_unban(message: Message, bot: Bot):
    logger.info(f"[MOD] cmd_unban –≤—ã–∑–≤–∞–Ω: text={message.text}, chat_id={message.chat.id}")
    if message.chat.id != ADMIN_GROUP_ID:
        return

    if not message.reply_to_message:
        await reply_required(message, "/unban")
        return

    user_id = extract_user_id_from_reply(message)
    logger.info(f"[MOD] user_id –∏–∑ reply: {user_id}")
    if not user_id:
        await reply_required(message, "/unban")
        return

    unban_user(user_id)
    logger.info(f"[MOD] –†–∞–∑–±–∞–Ω–µ–Ω user_id={user_id}")
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    try:
        await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.warning(f"[MOD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")


# ‚ùì /status
@router.message(F.chat.id == ADMIN_GROUP_ID, Command("status", ignore_mention=True, ignore_case=True))
async def cmd_status(message: Message):
    user_id = extract_user_id_from_reply(message)
    if not user_id:
        await reply_required(message, "/status")
        return

    logger.info(f"[STATUS] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è user_id={user_id}")

    try:
        status = get_user_status(user_id)
    except Exception as e:
        logger.error(f"[STATUS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not status:
        await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if status.get("banned"):
        banned_at = status.get("banned_at")
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å {banned_at} UTC.")
        return

    if status.get("muted"):
        muted_until = status.get("muted_until")
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –¥–æ {muted_until} UTC.")
        return

    await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")

# ‚Ü™Ô∏è/send_to_pro_group
@router.message(Command("send_to_pro_group"), F.chat.id == ADMIN_GROUP_ID, F.reply_to_message)
async def send_to_pro_group(message: Message):
    try:
        thread_id = MEDPHYSPRO_GROUP_TOPIC_ID
        suffix = ""  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        sent = await send_content_to_group(
            message=message.reply_to_message,
            bot=message.bot,
            chat_id=MEDPHYSPRO_GROUP_ID,
            thread_id=thread_id,
            suffix=suffix
        )

        if not sent:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            return

        # –õ–æ–≥ –≤ —Ñ–∞–π–ª
        logger.info(
            f"[MOD] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ PRO-–≥—Ä—É–ø–ø—É: from_msg_id={message.reply_to_message.message_id}, "
            f"to_msg_id={sent.message_id}, by={message.from_user.id}"
        )

        # –õ–æ–≥ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
        await message.bot.send_message(
            chat_id=LOG_CHANNEL_ID,
            text=(
                f"üì§ <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã –≤ PRO-–≥—Ä—É–ø–ø—É</b>\n"
                f"‚Ü™Ô∏è –ò—Å—Ö–æ–¥–Ω–æ–µ msg_id: <code>{message.reply_to_message.message_id}</code>\n"
                f"üì® –ù–æ–≤–æ–µ msg_id: <code>{sent.message_id}</code>\n"
                f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <a href=\"tg://user?id={message.from_user.id}\">{message.from_user.full_name}</a>"
            ),
            parse_mode="HTML"
        )

        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ PRO-–≥—Ä—É–ø–ø—É")

    except TelegramBadRequest as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e.message}")

